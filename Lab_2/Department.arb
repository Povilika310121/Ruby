class Department
    
    attr_accessor :name, :duties #attr_accessor геттер и сеттор одновременно
    attr_reader :phone_number
    def initialize(name, phone_number,  duties = [])
        @name = name
        self.phone_number = phone_number
        @duties = duties
    end

    def phone_number=(phone_number)
        if Department.check_phone?(phone_number)
          @phone_number = phone_number
        else raise ArgumentError.new("#{phone_number} не номер телефона!")
        end
    end

    def Department.check_phone?(phone_number)
        /\+7([.-]?)([0-9]{3})([.-]?)([0-9]{3})([.-]?)([0-9]{2})([.-]?)([0-9]{2})/ =~ phone_number
      end

    def add_duty(duty)
        @duties <<duty
    end

    def highligth(ind)
        @highligth_duty = ind - 1
    end

    def del_duties(ind)
        @duties.delete_at(ind-1)
    end

    def highligth_read()
        @duties[@highligth_duty]
    end

    def replace_highligth_duty(text)
        @duties[@highligth_duty] = text
    end

    def to_s
        if @duties.empty?
            s = "Name: #{@name}\nPhone: #{@phone_number}\n"
        else
            s = "Name: #{@name}\nPhone: #{@phone_number}\nDuties: \n"
            @duties.each_index { |i| s += "\t #{i+1}. #{@duties[i]}\n" } 
        end
        s + "\n"
    end

    def Department.read_from_txt(file_name)
        file = File.new(file_name + ".txt", "r")
        (file.read.split(/~\n/).map { |object_str| object_str.split(/\n/) }).map { |object| object = Department.new(object.shift, object.shift, object)}
        #shift возвращает элемент массива и удаляет его
    end

    def Department.print_from_txt(array)
        s = ""
        array.length.times do |index|
            if array[index].duties.empty?
                s+= "##{index + 1}\n\tName: #{array[index].name}\n\tPhone: #{array[index].phone_number}\n"
            else
                s+= "##{index + 1}\n\tName: #{array[index].name}\n\tPhone: #{array[index].phone_number}\n\tDuties: \n\t"
                array[index].duties.each_index { |i| s+= "\t #{i+1}. #{array[index].duties[i]}\n\t" } 
            end
            s+="\n"  
        end
        s
    end

    def Department.write_to_txt(array, file_name)
        output = File.new(file_name + ".txt", "w")
        output.puts array.map { |object| object = ([] << object.name << object.phone_number << object.duties).join("\n") }.join("\n~\n")
        output.close()
    end

    def Department.write_to_YAML(array, file_name)
        require 'yaml'
        output = File.new(file_name + ".yaml", "w")
        YAML.dump(array, output)
        output.close()
    end

    def Department.read_from_YAML(file_name)
        require 'yaml'
        YAML.load_file (file_name + ".yaml"), permitted_classes: [Department]
    end
  
end

class Department_list
    def initialize(*list)  # * - Передача произвольного числа аргументов в метод
      @dep_list = Array.new
    end
end




from_yaml=Department.read_from_YAML("output_yaml")
puts from_yaml
vika = Department.new('Vika', '+7-901-013-42-31')
vika.add_duty("сделать всю домашку")
vika.add_duty("найти работу")
vika.add_duty("выспаться")
from_yaml<<vika
Department.write_to_YAML(from_yaml, "output_yaml")
# puts Department.read_from_YAML("output_yaml")
# danna = Department.new("Danna", "+79009053535")
# vika.highligth(3)
# vika.replace_highligth_duty("учиться всю ночь")
# puts vika, danna
# Department.write_to_txt(from_txt, "output")
# Department.write_to_txt([vika, danna], "output")
